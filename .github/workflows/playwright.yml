name: Playwright-Tests
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup-and-run-tests:
    # setup and run the tests in parallel machines, with each machine uploading its own results to artifacts
    # artifacts are shared among jobs and machines
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1/2, 2/2]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test --shard ${{ matrix.shard }}

    # Once playwright finishes it will create a folder called 'blob-report' where it will put all the reports
    - name: Upload blob report to GitHub Actions Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: merged-reports-as-blob # name of the file you want to have once its uploaded
        path: blob-report # path where the reports are, from where to take the files. 
        retention-days: 90


  merge-reports-and-upload:
    # Merge reports after playwright tests, even if some shards have failed
    if: always()
    needs: [setup-and-run-tests]
    runs-on: ubuntu-latest

    outputs:
        timestamp: ${{ steps.timestampid.outputs.timestamp }}

    steps:

    # We want a unique identifier to be used when we create subdirectories for our github pages with reports
    - name: Set a timestamp
      id: timestampid
      # this will store current time with UTC in outputs.timestamp (eg of value: 20231028_233147Z)
      run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT" 

    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      run: npm ci

    # we now download the reports uploaded previously to merge them and create one single html report
    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v3
      with:
        name: merged-reports-as-blob # name of the file stored as artifact (as uploaded at the previous job)
        path: downloaded-merged-reports-as-blob # name of the folder where the download will be saved

    # Playwright will generate a report and store it inside a folder called '/playwright-report'
    - name: Merge the blobs into one single HTML Report
      run: npx playwright merge-reports --reporter html ./downloaded-merged-reports-as-blob

    - name: /[OPTIONAL] Upload full html report to artifacts for history
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report-${{ steps.timestampid.outputs.timestamp }} # name of the file you want to have once its uploaded
        path: playwright-report # path where the reports are, from where to take the files
        retention-days: 90

    - name: Push the new files to github pages
    # This will create a separate branch called gh-pages where it will store only reports. And from where it will push all future changes 
    # to github pages. Having a separate branch will keep the reports and changes commits separate to your main/master
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./playwright-report # from what folder to take files. It takes only contents
        destination_dir: ${{ steps.timestampid.outputs.timestamp }} # a sub-directory where to publish to avoid overwriting other reports
        
    - name: Write URL in summary
      run: echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/playwright-example-with-typescript/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY
