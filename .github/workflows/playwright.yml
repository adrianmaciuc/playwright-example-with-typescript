name: Playwright Tests
run-name: Playwright-Tests run ${{ github.run_number }}
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup-and-run-tests:
    # setup and run the tests in parallel machines, with each machine uploading its own results to artifacts
    # artifacts are shared among jobs and machines
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        continue-on-error: true
        run: npx playwright test

  playwright-html-reporter:
    # Merge reports after playwright tests, even if some shards have failed
    needs: [setup-and-run-tests]
    runs-on: ubuntu-latest

    steps:
      # We want a unique identifier to be used when we create subdirectories for our github pages with reports
      - name: Set a timestamp
        id: timestampid
        # this will store current time with UTC in env.timestamp (eg of value: 20231028_233147Z)
        run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_ENV"

      # Once playwright finishes it will create a folder called 'playwright-report' where it will put all the reports
      - name: Upload report to GitHub Actions Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report-${{ env.timestamp }} # name of the file you want to have stored as artifact
          path: ./playwright-report # path where the reports are, from where to take the files.
          retention-days: 30

      - name:
          Push the playwright html report files to github pages
          # This will create a separate branch called gh-pages where it will store only reports. And from where it will push all future changes
          # to github pages. Having a separate branch will keep the reports and changes commits separate to your main/master
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
          publish_dir: ./playwright-report # from what folder to take files. It takes only contents
          destination_dir: ${{ env.timestamp }} # a sub-directory where to publish to avoid overwriting other reports


      # - uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      # - name: Install dependencies
      #   run: npm ci

      # - name: /[OPTIONAL] Upload full html report to artifacts for history
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: playwright-report-${{ steps.timestampid.outputs.timestamp }} # name of the file you want to have once its uploaded
      #     path: playwright-report # path where the reports are, from where to take the files
      #     retention-days: 30
      # - name: Switch to gh-pages branch to deal with allure reports history
      #   uses: actions/checkout@v3
      #   with:
      #     ref: gh-pages
      #     path: gh-pages

      #   # This will fetch ALL the history as json. But keep the screenshots/traces from previous runs only for the past keep_reports nr
      # - name: Allure history fetch from gh-pages, mix and generate new report
      #   uses: simple-elf/allure-report-action@master
      #   with:
      #     allure_results: allure-results
      #     gh_pages: gh-pages
      #     allure_report: allure-report
      #     allure_history: allure-history
      #     keep_reports: 5 # this is number of reports to keep (not days)

      # - name: Deploy Report to Github Pages using gh-pages branch
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PUBLISH_BRANCH: gh-pages
      #     PUBLISH_DIR: allure-history

      # - name: Write URL in summary
      #   run: echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/playwright-example-with-typescript/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY

      # - name: Switch to gh-pages branch to deal with reports
      #   uses: actions/checkout@v3
      #   with:
      #     ref: gh-pages
      #     path: gh-pages

      # # This will fetch ALL the history as json. But keep the screenshots/traces from previous runs only for the past keep_reports nr
      # - name: Allure history fetch from gh-pages, mix and generate new report
      #   uses: simple-elf/allure-report-action@master
      #   with:
      #     allure_results: allure-results
      #     gh_pages: gh-pages
      #     allure_report: allure-report
      #     allure_history: allure-history
      #     keep_reports: 5 # this is number of reports to keep (not days)

      # - name: Deploy Report to Github Pages using gh-pages branch
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PUBLISH_BRANCH: gh-pages
      #     PUBLISH_DIR: allure-history

      # - name: Write publish message in summary
      #   run: |
      #     echo "### REPORT LINK - Takes up to 20 seconds to publish the results - https://${{ github.repository_owner }}.github.io/playwright-example-with-typescript/${{ github.run_number }}/" >> $GITHUB_STEP_SUMMARY
      #     echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/playwright-example-with-typescript/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY
